
package burp.pocs;

import java.util.List;
import burp.IRequestInfo;
import burp.util.Header;
import burp.util.Parameter;
import burp.util.Request;
import burp.util.Util;

/**
 * Ajax CSRF POCs
 * 
 * @author Joaquin R. Martinez <joaquin.ramirez.mtz.lab@gmail.com>
 */
public class AjaxPocGenerator implements PocGenerator {

	@Override
	public byte[] generate(Request request) {
		String lineSeparator = System.lineSeparator();
		String scriptTag = createScriptTag(request, lineSeparator);
		String formTag = createFormTag(lineSeparator);
		return createHTMLPage(scriptTag + formTag, lineSeparator).getBytes();
	}

	private String createFormTag(String lineSeparator) {
		String form = "\t\t<form action=\"#\">" + lineSeparator;
		form += "\t\t\t<input type=\"button\" value=\"Submit request\" onclick=\"submitRequest();\" />" + lineSeparator;
		form += "\t\t</form>" + lineSeparator;
		return form;
	}

	private String createScriptTag(final Request request, String lineSeparator) {
		String script = "\t<script>" + lineSeparator;
		script += "\t\tfunction submitRequest() {" + lineSeparator;
		script += "\t\t\tvar xhr = new XMLHttpRequest();" + lineSeparator;
		if ("GET".equals(request.getMethod())) {
			script += createGETXHRRequest(request.getUrl().toString(), lineSeparator);
		} else {
			script += createNotGETXHRRequest(request, lineSeparator);
		}
		script += "\t\t}" + lineSeparator;
		script += "\t</script>" + lineSeparator;
		return script;
	}

	private String createGETXHRRequest(String url, String lineSeparator) {
		String getRequest = String.format("\t\t\txhr.open(\"GET\", \"%s\", true);%s", url, lineSeparator);
		getRequest += "\t\t\txhr.send();" + lineSeparator;
		return getRequest;
	}

	private String createNotGETXHRRequest(final Request request, String lineSeparator) {
		String postRequest = "";
		postRequest += String.format("\t\t\txhr.open(\"%s\", \"%s\", true);%s", request.getMethod(),
				request.getUrl().toString(), lineSeparator);
		postRequest += addHeaders(request.getHeaders(), lineSeparator);
		postRequest += "\t\t\txhr.withCredentials = true;" + lineSeparator;
		postRequest += "\t\t\tvar body = " + createBody(request, lineSeparator) + lineSeparator;
		postRequest += "\t\t\tvar aBody = new Uint8Array(body.length);" + lineSeparator;
		postRequest += "\t\t\tfor (var i = 0; i < aBody.length; i++)" + lineSeparator;
		postRequest += "\t\t\taBody[i] = body.charCodeAt(i);" + lineSeparator;
		postRequest += "\t\t\txhr.send(new Blob([aBody]));" + lineSeparator;
		return postRequest;
	}

	private String addHeaders(final List<Header> headers, String lineSeparator) {
		String accept = "*/*";
		String content = "text/plain";
		for (Parameter next : headers) {
			if ("Accept".equalsIgnoreCase(next.getName()))
				accept = next.getValue();
			if ("Content-Type".equalsIgnoreCase(next.getName()))
				content = next.getValue();
		}

		String pocString = String.format("\t\t\txhr.setRequestHeader(\"Accept\", \"%s\");", accept) + lineSeparator;
		pocString += String.format("\t\t\txhr.setRequestHeader(\"Content-Type\", \"%s\");", content) + lineSeparator;
		return pocString;
	}

	private String createHTMLPage(String body, String lineSeparator) {
		String html = "<!DOCTYPE html>" + lineSeparator;
		html += "<html>" + lineSeparator;
		html += "\t<!-- CSRF PoC - generated by Burp Suite plugin -->" + lineSeparator;
		html += "\t<body>" + lineSeparator;
		html += body;
		html += "\t</body>" + lineSeparator;
		html += "</html>";
		return html;
	}

	private String createBody(Request request, String lineSeparator) {
		String body = Util.escape(request.getRequestBody());
		String formattedBody = String.format("\"%s\";%s", body, lineSeparator);
		if (request.getContentType() == IRequestInfo.CONTENT_TYPE_MULTIPART) {
			formattedBody = createMultipartBody(body, lineSeparator);
		}
		return formattedBody;
	}

	private String createMultipartBody(String body, String lineSeparator) {
		String formattedLines = "";
		String[] lines = body.split("\r\n");
		for (int i = 0; i < lines.length; i++) {
			String endLine = (i == lines.length - 1) ? ";" : " +";
			formattedLines += String.format("\"%s\\r\\n\"%s%s", lines[i], endLine, lineSeparator);
		}
		return formattedLines;
	}

}
